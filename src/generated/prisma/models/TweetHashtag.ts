
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TweetHashtag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TweetHashtag
 * 
 */
export type TweetHashtagModel = runtime.Types.Result.DefaultSelection<Prisma.$TweetHashtagPayload>

export type AggregateTweetHashtag = {
  _count: TweetHashtagCountAggregateOutputType | null
  _avg: TweetHashtagAvgAggregateOutputType | null
  _sum: TweetHashtagSumAggregateOutputType | null
  _min: TweetHashtagMinAggregateOutputType | null
  _max: TweetHashtagMaxAggregateOutputType | null
}

export type TweetHashtagAvgAggregateOutputType = {
  id: number | null
  tweetId: number | null
  hashtagId: number | null
}

export type TweetHashtagSumAggregateOutputType = {
  id: number | null
  tweetId: number | null
  hashtagId: number | null
}

export type TweetHashtagMinAggregateOutputType = {
  id: number | null
  tweetId: number | null
  hashtagId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TweetHashtagMaxAggregateOutputType = {
  id: number | null
  tweetId: number | null
  hashtagId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TweetHashtagCountAggregateOutputType = {
  id: number
  tweetId: number
  hashtagId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TweetHashtagAvgAggregateInputType = {
  id?: true
  tweetId?: true
  hashtagId?: true
}

export type TweetHashtagSumAggregateInputType = {
  id?: true
  tweetId?: true
  hashtagId?: true
}

export type TweetHashtagMinAggregateInputType = {
  id?: true
  tweetId?: true
  hashtagId?: true
  createdAt?: true
  updatedAt?: true
}

export type TweetHashtagMaxAggregateInputType = {
  id?: true
  tweetId?: true
  hashtagId?: true
  createdAt?: true
  updatedAt?: true
}

export type TweetHashtagCountAggregateInputType = {
  id?: true
  tweetId?: true
  hashtagId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TweetHashtagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TweetHashtag to aggregate.
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TweetHashtags to fetch.
   */
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TweetHashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TweetHashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TweetHashtags
  **/
  _count?: true | TweetHashtagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TweetHashtagAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TweetHashtagSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TweetHashtagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TweetHashtagMaxAggregateInputType
}

export type GetTweetHashtagAggregateType<T extends TweetHashtagAggregateArgs> = {
      [P in keyof T & keyof AggregateTweetHashtag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTweetHashtag[P]>
    : Prisma.GetScalarType<T[P], AggregateTweetHashtag[P]>
}




export type TweetHashtagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TweetHashtagWhereInput
  orderBy?: Prisma.TweetHashtagOrderByWithAggregationInput | Prisma.TweetHashtagOrderByWithAggregationInput[]
  by: Prisma.TweetHashtagScalarFieldEnum[] | Prisma.TweetHashtagScalarFieldEnum
  having?: Prisma.TweetHashtagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TweetHashtagCountAggregateInputType | true
  _avg?: TweetHashtagAvgAggregateInputType
  _sum?: TweetHashtagSumAggregateInputType
  _min?: TweetHashtagMinAggregateInputType
  _max?: TweetHashtagMaxAggregateInputType
}

export type TweetHashtagGroupByOutputType = {
  id: number
  tweetId: number
  hashtagId: number
  createdAt: Date
  updatedAt: Date
  _count: TweetHashtagCountAggregateOutputType | null
  _avg: TweetHashtagAvgAggregateOutputType | null
  _sum: TweetHashtagSumAggregateOutputType | null
  _min: TweetHashtagMinAggregateOutputType | null
  _max: TweetHashtagMaxAggregateOutputType | null
}

type GetTweetHashtagGroupByPayload<T extends TweetHashtagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TweetHashtagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TweetHashtagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TweetHashtagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TweetHashtagGroupByOutputType[P]>
      }
    >
  > 



export type TweetHashtagWhereInput = {
  AND?: Prisma.TweetHashtagWhereInput | Prisma.TweetHashtagWhereInput[]
  OR?: Prisma.TweetHashtagWhereInput[]
  NOT?: Prisma.TweetHashtagWhereInput | Prisma.TweetHashtagWhereInput[]
  id?: Prisma.IntFilter<"TweetHashtag"> | number
  tweetId?: Prisma.IntFilter<"TweetHashtag"> | number
  hashtagId?: Prisma.IntFilter<"TweetHashtag"> | number
  createdAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
  hashtag?: Prisma.XOR<Prisma.HashtagScalarRelationFilter, Prisma.HashtagWhereInput>
}

export type TweetHashtagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tweet?: Prisma.TweetOrderByWithRelationInput
  hashtag?: Prisma.HashtagOrderByWithRelationInput
}

export type TweetHashtagWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  tweetId_hashtagId?: Prisma.TweetHashtagTweetIdHashtagIdCompoundUniqueInput
  AND?: Prisma.TweetHashtagWhereInput | Prisma.TweetHashtagWhereInput[]
  OR?: Prisma.TweetHashtagWhereInput[]
  NOT?: Prisma.TweetHashtagWhereInput | Prisma.TweetHashtagWhereInput[]
  tweetId?: Prisma.IntFilter<"TweetHashtag"> | number
  hashtagId?: Prisma.IntFilter<"TweetHashtag"> | number
  createdAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
  hashtag?: Prisma.XOR<Prisma.HashtagScalarRelationFilter, Prisma.HashtagWhereInput>
}, "id" | "tweetId_hashtagId">

export type TweetHashtagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TweetHashtagCountOrderByAggregateInput
  _avg?: Prisma.TweetHashtagAvgOrderByAggregateInput
  _max?: Prisma.TweetHashtagMaxOrderByAggregateInput
  _min?: Prisma.TweetHashtagMinOrderByAggregateInput
  _sum?: Prisma.TweetHashtagSumOrderByAggregateInput
}

export type TweetHashtagScalarWhereWithAggregatesInput = {
  AND?: Prisma.TweetHashtagScalarWhereWithAggregatesInput | Prisma.TweetHashtagScalarWhereWithAggregatesInput[]
  OR?: Prisma.TweetHashtagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TweetHashtagScalarWhereWithAggregatesInput | Prisma.TweetHashtagScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TweetHashtag"> | number
  tweetId?: Prisma.IntWithAggregatesFilter<"TweetHashtag"> | number
  hashtagId?: Prisma.IntWithAggregatesFilter<"TweetHashtag"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TweetHashtag"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TweetHashtag"> | Date | string
}

export type TweetHashtagCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  tweet: Prisma.TweetCreateNestedOneWithoutHashtagsInput
  hashtag: Prisma.HashtagCreateNestedOneWithoutTweetTagsInput
}

export type TweetHashtagUncheckedCreateInput = {
  id?: number
  tweetId: number
  hashtagId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweet?: Prisma.TweetUpdateOneRequiredWithoutHashtagsNestedInput
  hashtag?: Prisma.HashtagUpdateOneRequiredWithoutTweetTagsNestedInput
}

export type TweetHashtagUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tweetId?: Prisma.IntFieldUpdateOperationsInput | number
  hashtagId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagCreateManyInput = {
  id?: number
  tweetId: number
  hashtagId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tweetId?: Prisma.IntFieldUpdateOperationsInput | number
  hashtagId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagListRelationFilter = {
  every?: Prisma.TweetHashtagWhereInput
  some?: Prisma.TweetHashtagWhereInput
  none?: Prisma.TweetHashtagWhereInput
}

export type TweetHashtagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TweetHashtagTweetIdHashtagIdCompoundUniqueInput = {
  tweetId: number
  hashtagId: number
}

export type TweetHashtagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetHashtagAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
}

export type TweetHashtagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetHashtagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetHashtagSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  hashtagId?: Prisma.SortOrder
}

export type TweetHashtagCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput> | Prisma.TweetHashtagCreateWithoutTweetInput[] | Prisma.TweetHashtagUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutTweetInput | Prisma.TweetHashtagCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.TweetHashtagCreateManyTweetInputEnvelope
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
}

export type TweetHashtagUncheckedCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput> | Prisma.TweetHashtagCreateWithoutTweetInput[] | Prisma.TweetHashtagUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutTweetInput | Prisma.TweetHashtagCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.TweetHashtagCreateManyTweetInputEnvelope
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
}

export type TweetHashtagUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput> | Prisma.TweetHashtagCreateWithoutTweetInput[] | Prisma.TweetHashtagUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutTweetInput | Prisma.TweetHashtagCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.TweetHashtagUpsertWithWhereUniqueWithoutTweetInput | Prisma.TweetHashtagUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.TweetHashtagCreateManyTweetInputEnvelope
  set?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  disconnect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  delete?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  update?: Prisma.TweetHashtagUpdateWithWhereUniqueWithoutTweetInput | Prisma.TweetHashtagUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.TweetHashtagUpdateManyWithWhereWithoutTweetInput | Prisma.TweetHashtagUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
}

export type TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput> | Prisma.TweetHashtagCreateWithoutTweetInput[] | Prisma.TweetHashtagUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutTweetInput | Prisma.TweetHashtagCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.TweetHashtagUpsertWithWhereUniqueWithoutTweetInput | Prisma.TweetHashtagUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.TweetHashtagCreateManyTweetInputEnvelope
  set?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  disconnect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  delete?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  update?: Prisma.TweetHashtagUpdateWithWhereUniqueWithoutTweetInput | Prisma.TweetHashtagUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.TweetHashtagUpdateManyWithWhereWithoutTweetInput | Prisma.TweetHashtagUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
}

export type TweetHashtagCreateNestedManyWithoutHashtagInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput> | Prisma.TweetHashtagCreateWithoutHashtagInput[] | Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput | Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput[]
  createMany?: Prisma.TweetHashtagCreateManyHashtagInputEnvelope
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
}

export type TweetHashtagUncheckedCreateNestedManyWithoutHashtagInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput> | Prisma.TweetHashtagCreateWithoutHashtagInput[] | Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput | Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput[]
  createMany?: Prisma.TweetHashtagCreateManyHashtagInputEnvelope
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
}

export type TweetHashtagUpdateManyWithoutHashtagNestedInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput> | Prisma.TweetHashtagCreateWithoutHashtagInput[] | Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput | Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput[]
  upsert?: Prisma.TweetHashtagUpsertWithWhereUniqueWithoutHashtagInput | Prisma.TweetHashtagUpsertWithWhereUniqueWithoutHashtagInput[]
  createMany?: Prisma.TweetHashtagCreateManyHashtagInputEnvelope
  set?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  disconnect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  delete?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  update?: Prisma.TweetHashtagUpdateWithWhereUniqueWithoutHashtagInput | Prisma.TweetHashtagUpdateWithWhereUniqueWithoutHashtagInput[]
  updateMany?: Prisma.TweetHashtagUpdateManyWithWhereWithoutHashtagInput | Prisma.TweetHashtagUpdateManyWithWhereWithoutHashtagInput[]
  deleteMany?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
}

export type TweetHashtagUncheckedUpdateManyWithoutHashtagNestedInput = {
  create?: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput> | Prisma.TweetHashtagCreateWithoutHashtagInput[] | Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput[]
  connectOrCreate?: Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput | Prisma.TweetHashtagCreateOrConnectWithoutHashtagInput[]
  upsert?: Prisma.TweetHashtagUpsertWithWhereUniqueWithoutHashtagInput | Prisma.TweetHashtagUpsertWithWhereUniqueWithoutHashtagInput[]
  createMany?: Prisma.TweetHashtagCreateManyHashtagInputEnvelope
  set?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  disconnect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  delete?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  connect?: Prisma.TweetHashtagWhereUniqueInput | Prisma.TweetHashtagWhereUniqueInput[]
  update?: Prisma.TweetHashtagUpdateWithWhereUniqueWithoutHashtagInput | Prisma.TweetHashtagUpdateWithWhereUniqueWithoutHashtagInput[]
  updateMany?: Prisma.TweetHashtagUpdateManyWithWhereWithoutHashtagInput | Prisma.TweetHashtagUpdateManyWithWhereWithoutHashtagInput[]
  deleteMany?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
}

export type TweetHashtagCreateWithoutTweetInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  hashtag: Prisma.HashtagCreateNestedOneWithoutTweetTagsInput
}

export type TweetHashtagUncheckedCreateWithoutTweetInput = {
  id?: number
  hashtagId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagCreateOrConnectWithoutTweetInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput>
}

export type TweetHashtagCreateManyTweetInputEnvelope = {
  data: Prisma.TweetHashtagCreateManyTweetInput | Prisma.TweetHashtagCreateManyTweetInput[]
  skipDuplicates?: boolean
}

export type TweetHashtagUpsertWithWhereUniqueWithoutTweetInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  update: Prisma.XOR<Prisma.TweetHashtagUpdateWithoutTweetInput, Prisma.TweetHashtagUncheckedUpdateWithoutTweetInput>
  create: Prisma.XOR<Prisma.TweetHashtagCreateWithoutTweetInput, Prisma.TweetHashtagUncheckedCreateWithoutTweetInput>
}

export type TweetHashtagUpdateWithWhereUniqueWithoutTweetInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  data: Prisma.XOR<Prisma.TweetHashtagUpdateWithoutTweetInput, Prisma.TweetHashtagUncheckedUpdateWithoutTweetInput>
}

export type TweetHashtagUpdateManyWithWhereWithoutTweetInput = {
  where: Prisma.TweetHashtagScalarWhereInput
  data: Prisma.XOR<Prisma.TweetHashtagUpdateManyMutationInput, Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetInput>
}

export type TweetHashtagScalarWhereInput = {
  AND?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
  OR?: Prisma.TweetHashtagScalarWhereInput[]
  NOT?: Prisma.TweetHashtagScalarWhereInput | Prisma.TweetHashtagScalarWhereInput[]
  id?: Prisma.IntFilter<"TweetHashtag"> | number
  tweetId?: Prisma.IntFilter<"TweetHashtag"> | number
  hashtagId?: Prisma.IntFilter<"TweetHashtag"> | number
  createdAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TweetHashtag"> | Date | string
}

export type TweetHashtagCreateWithoutHashtagInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  tweet: Prisma.TweetCreateNestedOneWithoutHashtagsInput
}

export type TweetHashtagUncheckedCreateWithoutHashtagInput = {
  id?: number
  tweetId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagCreateOrConnectWithoutHashtagInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput>
}

export type TweetHashtagCreateManyHashtagInputEnvelope = {
  data: Prisma.TweetHashtagCreateManyHashtagInput | Prisma.TweetHashtagCreateManyHashtagInput[]
  skipDuplicates?: boolean
}

export type TweetHashtagUpsertWithWhereUniqueWithoutHashtagInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  update: Prisma.XOR<Prisma.TweetHashtagUpdateWithoutHashtagInput, Prisma.TweetHashtagUncheckedUpdateWithoutHashtagInput>
  create: Prisma.XOR<Prisma.TweetHashtagCreateWithoutHashtagInput, Prisma.TweetHashtagUncheckedCreateWithoutHashtagInput>
}

export type TweetHashtagUpdateWithWhereUniqueWithoutHashtagInput = {
  where: Prisma.TweetHashtagWhereUniqueInput
  data: Prisma.XOR<Prisma.TweetHashtagUpdateWithoutHashtagInput, Prisma.TweetHashtagUncheckedUpdateWithoutHashtagInput>
}

export type TweetHashtagUpdateManyWithWhereWithoutHashtagInput = {
  where: Prisma.TweetHashtagScalarWhereInput
  data: Prisma.XOR<Prisma.TweetHashtagUpdateManyMutationInput, Prisma.TweetHashtagUncheckedUpdateManyWithoutHashtagInput>
}

export type TweetHashtagCreateManyTweetInput = {
  id?: number
  hashtagId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagUpdateWithoutTweetInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hashtag?: Prisma.HashtagUpdateOneRequiredWithoutTweetTagsNestedInput
}

export type TweetHashtagUncheckedUpdateWithoutTweetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hashtagId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagUncheckedUpdateManyWithoutTweetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hashtagId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagCreateManyHashtagInput = {
  id?: number
  tweetId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetHashtagUpdateWithoutHashtagInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweet?: Prisma.TweetUpdateOneRequiredWithoutHashtagsNestedInput
}

export type TweetHashtagUncheckedUpdateWithoutHashtagInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tweetId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetHashtagUncheckedUpdateManyWithoutHashtagInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tweetId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TweetHashtagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tweetId?: boolean
  hashtagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweetHashtag"]>

export type TweetHashtagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tweetId?: boolean
  hashtagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweetHashtag"]>

export type TweetHashtagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tweetId?: boolean
  hashtagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweetHashtag"]>

export type TweetHashtagSelectScalar = {
  id?: boolean
  tweetId?: boolean
  hashtagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TweetHashtagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tweetId" | "hashtagId" | "createdAt" | "updatedAt", ExtArgs["result"]["tweetHashtag"]>
export type TweetHashtagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}
export type TweetHashtagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}
export type TweetHashtagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  hashtag?: boolean | Prisma.HashtagDefaultArgs<ExtArgs>
}

export type $TweetHashtagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TweetHashtag"
  objects: {
    tweet: Prisma.$TweetPayload<ExtArgs>
    hashtag: Prisma.$HashtagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tweetId: number
    hashtagId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["tweetHashtag"]>
  composites: {}
}

export type TweetHashtagGetPayload<S extends boolean | null | undefined | TweetHashtagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload, S>

export type TweetHashtagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TweetHashtagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TweetHashtagCountAggregateInputType | true
  }

export interface TweetHashtagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TweetHashtag'], meta: { name: 'TweetHashtag' } }
  /**
   * Find zero or one TweetHashtag that matches the filter.
   * @param {TweetHashtagFindUniqueArgs} args - Arguments to find a TweetHashtag
   * @example
   * // Get one TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TweetHashtagFindUniqueArgs>(args: Prisma.SelectSubset<T, TweetHashtagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TweetHashtag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TweetHashtagFindUniqueOrThrowArgs} args - Arguments to find a TweetHashtag
   * @example
   * // Get one TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TweetHashtagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TweetHashtagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TweetHashtag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagFindFirstArgs} args - Arguments to find a TweetHashtag
   * @example
   * // Get one TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TweetHashtagFindFirstArgs>(args?: Prisma.SelectSubset<T, TweetHashtagFindFirstArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TweetHashtag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagFindFirstOrThrowArgs} args - Arguments to find a TweetHashtag
   * @example
   * // Get one TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TweetHashtagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TweetHashtagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TweetHashtags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TweetHashtags
   * const tweetHashtags = await prisma.tweetHashtag.findMany()
   * 
   * // Get first 10 TweetHashtags
   * const tweetHashtags = await prisma.tweetHashtag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tweetHashtagWithIdOnly = await prisma.tweetHashtag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TweetHashtagFindManyArgs>(args?: Prisma.SelectSubset<T, TweetHashtagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TweetHashtag.
   * @param {TweetHashtagCreateArgs} args - Arguments to create a TweetHashtag.
   * @example
   * // Create one TweetHashtag
   * const TweetHashtag = await prisma.tweetHashtag.create({
   *   data: {
   *     // ... data to create a TweetHashtag
   *   }
   * })
   * 
   */
  create<T extends TweetHashtagCreateArgs>(args: Prisma.SelectSubset<T, TweetHashtagCreateArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TweetHashtags.
   * @param {TweetHashtagCreateManyArgs} args - Arguments to create many TweetHashtags.
   * @example
   * // Create many TweetHashtags
   * const tweetHashtag = await prisma.tweetHashtag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TweetHashtagCreateManyArgs>(args?: Prisma.SelectSubset<T, TweetHashtagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TweetHashtags and returns the data saved in the database.
   * @param {TweetHashtagCreateManyAndReturnArgs} args - Arguments to create many TweetHashtags.
   * @example
   * // Create many TweetHashtags
   * const tweetHashtag = await prisma.tweetHashtag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TweetHashtags and only return the `id`
   * const tweetHashtagWithIdOnly = await prisma.tweetHashtag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TweetHashtagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TweetHashtagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TweetHashtag.
   * @param {TweetHashtagDeleteArgs} args - Arguments to delete one TweetHashtag.
   * @example
   * // Delete one TweetHashtag
   * const TweetHashtag = await prisma.tweetHashtag.delete({
   *   where: {
   *     // ... filter to delete one TweetHashtag
   *   }
   * })
   * 
   */
  delete<T extends TweetHashtagDeleteArgs>(args: Prisma.SelectSubset<T, TweetHashtagDeleteArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TweetHashtag.
   * @param {TweetHashtagUpdateArgs} args - Arguments to update one TweetHashtag.
   * @example
   * // Update one TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TweetHashtagUpdateArgs>(args: Prisma.SelectSubset<T, TweetHashtagUpdateArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TweetHashtags.
   * @param {TweetHashtagDeleteManyArgs} args - Arguments to filter TweetHashtags to delete.
   * @example
   * // Delete a few TweetHashtags
   * const { count } = await prisma.tweetHashtag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TweetHashtagDeleteManyArgs>(args?: Prisma.SelectSubset<T, TweetHashtagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TweetHashtags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TweetHashtags
   * const tweetHashtag = await prisma.tweetHashtag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TweetHashtagUpdateManyArgs>(args: Prisma.SelectSubset<T, TweetHashtagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TweetHashtags and returns the data updated in the database.
   * @param {TweetHashtagUpdateManyAndReturnArgs} args - Arguments to update many TweetHashtags.
   * @example
   * // Update many TweetHashtags
   * const tweetHashtag = await prisma.tweetHashtag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TweetHashtags and only return the `id`
   * const tweetHashtagWithIdOnly = await prisma.tweetHashtag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TweetHashtagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TweetHashtagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TweetHashtag.
   * @param {TweetHashtagUpsertArgs} args - Arguments to update or create a TweetHashtag.
   * @example
   * // Update or create a TweetHashtag
   * const tweetHashtag = await prisma.tweetHashtag.upsert({
   *   create: {
   *     // ... data to create a TweetHashtag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TweetHashtag we want to update
   *   }
   * })
   */
  upsert<T extends TweetHashtagUpsertArgs>(args: Prisma.SelectSubset<T, TweetHashtagUpsertArgs<ExtArgs>>): Prisma.Prisma__TweetHashtagClient<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TweetHashtags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagCountArgs} args - Arguments to filter TweetHashtags to count.
   * @example
   * // Count the number of TweetHashtags
   * const count = await prisma.tweetHashtag.count({
   *   where: {
   *     // ... the filter for the TweetHashtags we want to count
   *   }
   * })
  **/
  count<T extends TweetHashtagCountArgs>(
    args?: Prisma.Subset<T, TweetHashtagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TweetHashtagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TweetHashtag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TweetHashtagAggregateArgs>(args: Prisma.Subset<T, TweetHashtagAggregateArgs>): Prisma.PrismaPromise<GetTweetHashtagAggregateType<T>>

  /**
   * Group by TweetHashtag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetHashtagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TweetHashtagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TweetHashtagGroupByArgs['orderBy'] }
      : { orderBy?: TweetHashtagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TweetHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweetHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TweetHashtag model
 */
readonly fields: TweetHashtagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TweetHashtag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TweetHashtagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tweet<T extends Prisma.TweetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TweetDefaultArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  hashtag<T extends Prisma.HashtagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.HashtagDefaultArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TweetHashtag model
 */
export interface TweetHashtagFieldRefs {
  readonly id: Prisma.FieldRef<"TweetHashtag", 'Int'>
  readonly tweetId: Prisma.FieldRef<"TweetHashtag", 'Int'>
  readonly hashtagId: Prisma.FieldRef<"TweetHashtag", 'Int'>
  readonly createdAt: Prisma.FieldRef<"TweetHashtag", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TweetHashtag", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TweetHashtag findUnique
 */
export type TweetHashtagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter, which TweetHashtag to fetch.
   */
  where: Prisma.TweetHashtagWhereUniqueInput
}

/**
 * TweetHashtag findUniqueOrThrow
 */
export type TweetHashtagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter, which TweetHashtag to fetch.
   */
  where: Prisma.TweetHashtagWhereUniqueInput
}

/**
 * TweetHashtag findFirst
 */
export type TweetHashtagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter, which TweetHashtag to fetch.
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TweetHashtags to fetch.
   */
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TweetHashtags.
   */
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TweetHashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TweetHashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TweetHashtags.
   */
  distinct?: Prisma.TweetHashtagScalarFieldEnum | Prisma.TweetHashtagScalarFieldEnum[]
}

/**
 * TweetHashtag findFirstOrThrow
 */
export type TweetHashtagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter, which TweetHashtag to fetch.
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TweetHashtags to fetch.
   */
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TweetHashtags.
   */
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TweetHashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TweetHashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TweetHashtags.
   */
  distinct?: Prisma.TweetHashtagScalarFieldEnum | Prisma.TweetHashtagScalarFieldEnum[]
}

/**
 * TweetHashtag findMany
 */
export type TweetHashtagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter, which TweetHashtags to fetch.
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TweetHashtags to fetch.
   */
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TweetHashtags.
   */
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TweetHashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TweetHashtags.
   */
  skip?: number
  distinct?: Prisma.TweetHashtagScalarFieldEnum | Prisma.TweetHashtagScalarFieldEnum[]
}

/**
 * TweetHashtag create
 */
export type TweetHashtagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * The data needed to create a TweetHashtag.
   */
  data: Prisma.XOR<Prisma.TweetHashtagCreateInput, Prisma.TweetHashtagUncheckedCreateInput>
}

/**
 * TweetHashtag createMany
 */
export type TweetHashtagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TweetHashtags.
   */
  data: Prisma.TweetHashtagCreateManyInput | Prisma.TweetHashtagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TweetHashtag createManyAndReturn
 */
export type TweetHashtagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * The data used to create many TweetHashtags.
   */
  data: Prisma.TweetHashtagCreateManyInput | Prisma.TweetHashtagCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TweetHashtag update
 */
export type TweetHashtagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * The data needed to update a TweetHashtag.
   */
  data: Prisma.XOR<Prisma.TweetHashtagUpdateInput, Prisma.TweetHashtagUncheckedUpdateInput>
  /**
   * Choose, which TweetHashtag to update.
   */
  where: Prisma.TweetHashtagWhereUniqueInput
}

/**
 * TweetHashtag updateMany
 */
export type TweetHashtagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TweetHashtags.
   */
  data: Prisma.XOR<Prisma.TweetHashtagUpdateManyMutationInput, Prisma.TweetHashtagUncheckedUpdateManyInput>
  /**
   * Filter which TweetHashtags to update
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * Limit how many TweetHashtags to update.
   */
  limit?: number
}

/**
 * TweetHashtag updateManyAndReturn
 */
export type TweetHashtagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * The data used to update TweetHashtags.
   */
  data: Prisma.XOR<Prisma.TweetHashtagUpdateManyMutationInput, Prisma.TweetHashtagUncheckedUpdateManyInput>
  /**
   * Filter which TweetHashtags to update
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * Limit how many TweetHashtags to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TweetHashtag upsert
 */
export type TweetHashtagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * The filter to search for the TweetHashtag to update in case it exists.
   */
  where: Prisma.TweetHashtagWhereUniqueInput
  /**
   * In case the TweetHashtag found by the `where` argument doesn't exist, create a new TweetHashtag with this data.
   */
  create: Prisma.XOR<Prisma.TweetHashtagCreateInput, Prisma.TweetHashtagUncheckedCreateInput>
  /**
   * In case the TweetHashtag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TweetHashtagUpdateInput, Prisma.TweetHashtagUncheckedUpdateInput>
}

/**
 * TweetHashtag delete
 */
export type TweetHashtagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  /**
   * Filter which TweetHashtag to delete.
   */
  where: Prisma.TweetHashtagWhereUniqueInput
}

/**
 * TweetHashtag deleteMany
 */
export type TweetHashtagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TweetHashtags to delete
   */
  where?: Prisma.TweetHashtagWhereInput
  /**
   * Limit how many TweetHashtags to delete.
   */
  limit?: number
}

/**
 * TweetHashtag without action
 */
export type TweetHashtagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
}
