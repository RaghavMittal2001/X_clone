
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Tweet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Tweet
 * 
 */
export type TweetModel = runtime.Types.Result.DefaultSelection<Prisma.$TweetPayload>

export type AggregateTweet = {
  _count: TweetCountAggregateOutputType | null
  _avg: TweetAvgAggregateOutputType | null
  _sum: TweetSumAggregateOutputType | null
  _min: TweetMinAggregateOutputType | null
  _max: TweetMaxAggregateOutputType | null
}

export type TweetAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type TweetSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type TweetMinAggregateOutputType = {
  id: number | null
  content: string | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TweetMaxAggregateOutputType = {
  id: number | null
  content: string | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TweetCountAggregateOutputType = {
  id: number
  content: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TweetAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type TweetSumAggregateInputType = {
  id?: true
  userId?: true
}

export type TweetMinAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type TweetMaxAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type TweetCountAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TweetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tweet to aggregate.
   */
  where?: Prisma.TweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tweets to fetch.
   */
  orderBy?: Prisma.TweetOrderByWithRelationInput | Prisma.TweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tweets
  **/
  _count?: true | TweetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TweetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TweetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TweetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TweetMaxAggregateInputType
}

export type GetTweetAggregateType<T extends TweetAggregateArgs> = {
      [P in keyof T & keyof AggregateTweet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTweet[P]>
    : Prisma.GetScalarType<T[P], AggregateTweet[P]>
}




export type TweetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TweetWhereInput
  orderBy?: Prisma.TweetOrderByWithAggregationInput | Prisma.TweetOrderByWithAggregationInput[]
  by: Prisma.TweetScalarFieldEnum[] | Prisma.TweetScalarFieldEnum
  having?: Prisma.TweetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TweetCountAggregateInputType | true
  _avg?: TweetAvgAggregateInputType
  _sum?: TweetSumAggregateInputType
  _min?: TweetMinAggregateInputType
  _max?: TweetMaxAggregateInputType
}

export type TweetGroupByOutputType = {
  id: number
  content: string
  userId: number
  createdAt: Date
  updatedAt: Date
  _count: TweetCountAggregateOutputType | null
  _avg: TweetAvgAggregateOutputType | null
  _sum: TweetSumAggregateOutputType | null
  _min: TweetMinAggregateOutputType | null
  _max: TweetMaxAggregateOutputType | null
}

type GetTweetGroupByPayload<T extends TweetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TweetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TweetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TweetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TweetGroupByOutputType[P]>
      }
    >
  > 



export type TweetWhereInput = {
  AND?: Prisma.TweetWhereInput | Prisma.TweetWhereInput[]
  OR?: Prisma.TweetWhereInput[]
  NOT?: Prisma.TweetWhereInput | Prisma.TweetWhereInput[]
  id?: Prisma.IntFilter<"Tweet"> | number
  content?: Prisma.StringFilter<"Tweet"> | string
  userId?: Prisma.IntFilter<"Tweet"> | number
  createdAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  likes?: Prisma.LikeListRelationFilter
  replies?: Prisma.ReplyListRelationFilter
  hashtags?: Prisma.TweetHashtagListRelationFilter
  bookmarks?: Prisma.BookmarkListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
}

export type TweetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  author?: Prisma.UserOrderByWithRelationInput
  likes?: Prisma.LikeOrderByRelationAggregateInput
  replies?: Prisma.ReplyOrderByRelationAggregateInput
  hashtags?: Prisma.TweetHashtagOrderByRelationAggregateInput
  bookmarks?: Prisma.BookmarkOrderByRelationAggregateInput
  notifications?: Prisma.NotificationOrderByRelationAggregateInput
}

export type TweetWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TweetWhereInput | Prisma.TweetWhereInput[]
  OR?: Prisma.TweetWhereInput[]
  NOT?: Prisma.TweetWhereInput | Prisma.TweetWhereInput[]
  content?: Prisma.StringFilter<"Tweet"> | string
  userId?: Prisma.IntFilter<"Tweet"> | number
  createdAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  likes?: Prisma.LikeListRelationFilter
  replies?: Prisma.ReplyListRelationFilter
  hashtags?: Prisma.TweetHashtagListRelationFilter
  bookmarks?: Prisma.BookmarkListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
}, "id">

export type TweetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TweetCountOrderByAggregateInput
  _avg?: Prisma.TweetAvgOrderByAggregateInput
  _max?: Prisma.TweetMaxOrderByAggregateInput
  _min?: Prisma.TweetMinOrderByAggregateInput
  _sum?: Prisma.TweetSumOrderByAggregateInput
}

export type TweetScalarWhereWithAggregatesInput = {
  AND?: Prisma.TweetScalarWhereWithAggregatesInput | Prisma.TweetScalarWhereWithAggregatesInput[]
  OR?: Prisma.TweetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TweetScalarWhereWithAggregatesInput | Prisma.TweetScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Tweet"> | number
  content?: Prisma.StringWithAggregatesFilter<"Tweet"> | string
  userId?: Prisma.IntWithAggregatesFilter<"Tweet"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tweet"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tweet"> | Date | string
}

export type TweetCreateInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateManyInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetUpdateManyMutationInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TweetListRelationFilter = {
  every?: Prisma.TweetWhereInput
  some?: Prisma.TweetWhereInput
  none?: Prisma.TweetWhereInput
}

export type TweetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TweetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TweetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TweetSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TweetScalarRelationFilter = {
  is?: Prisma.TweetWhereInput
  isNot?: Prisma.TweetWhereInput
}

export type TweetNullableScalarRelationFilter = {
  is?: Prisma.TweetWhereInput | null
  isNot?: Prisma.TweetWhereInput | null
}

export type TweetCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput> | Prisma.TweetCreateWithoutAuthorInput[] | Prisma.TweetUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutAuthorInput | Prisma.TweetCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.TweetCreateManyAuthorInputEnvelope
  connect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
}

export type TweetUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput> | Prisma.TweetCreateWithoutAuthorInput[] | Prisma.TweetUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutAuthorInput | Prisma.TweetCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.TweetCreateManyAuthorInputEnvelope
  connect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
}

export type TweetUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput> | Prisma.TweetCreateWithoutAuthorInput[] | Prisma.TweetUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutAuthorInput | Prisma.TweetCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.TweetUpsertWithWhereUniqueWithoutAuthorInput | Prisma.TweetUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.TweetCreateManyAuthorInputEnvelope
  set?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  disconnect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  delete?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  connect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  update?: Prisma.TweetUpdateWithWhereUniqueWithoutAuthorInput | Prisma.TweetUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.TweetUpdateManyWithWhereWithoutAuthorInput | Prisma.TweetUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.TweetScalarWhereInput | Prisma.TweetScalarWhereInput[]
}

export type TweetUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput> | Prisma.TweetCreateWithoutAuthorInput[] | Prisma.TweetUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutAuthorInput | Prisma.TweetCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.TweetUpsertWithWhereUniqueWithoutAuthorInput | Prisma.TweetUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.TweetCreateManyAuthorInputEnvelope
  set?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  disconnect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  delete?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  connect?: Prisma.TweetWhereUniqueInput | Prisma.TweetWhereUniqueInput[]
  update?: Prisma.TweetUpdateWithWhereUniqueWithoutAuthorInput | Prisma.TweetUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.TweetUpdateManyWithWhereWithoutAuthorInput | Prisma.TweetUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.TweetScalarWhereInput | Prisma.TweetScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TweetCreateNestedOneWithoutLikesInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutLikesInput, Prisma.TweetUncheckedCreateWithoutLikesInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutLikesInput
  connect?: Prisma.TweetWhereUniqueInput
}

export type TweetUpdateOneRequiredWithoutLikesNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutLikesInput, Prisma.TweetUncheckedCreateWithoutLikesInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutLikesInput
  upsert?: Prisma.TweetUpsertWithoutLikesInput
  connect?: Prisma.TweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TweetUpdateToOneWithWhereWithoutLikesInput, Prisma.TweetUpdateWithoutLikesInput>, Prisma.TweetUncheckedUpdateWithoutLikesInput>
}

export type TweetCreateNestedOneWithoutRepliesInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutRepliesInput, Prisma.TweetUncheckedCreateWithoutRepliesInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutRepliesInput
  connect?: Prisma.TweetWhereUniqueInput
}

export type TweetUpdateOneRequiredWithoutRepliesNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutRepliesInput, Prisma.TweetUncheckedCreateWithoutRepliesInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutRepliesInput
  upsert?: Prisma.TweetUpsertWithoutRepliesInput
  connect?: Prisma.TweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TweetUpdateToOneWithWhereWithoutRepliesInput, Prisma.TweetUpdateWithoutRepliesInput>, Prisma.TweetUncheckedUpdateWithoutRepliesInput>
}

export type TweetCreateNestedOneWithoutBookmarksInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutBookmarksInput, Prisma.TweetUncheckedCreateWithoutBookmarksInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutBookmarksInput
  connect?: Prisma.TweetWhereUniqueInput
}

export type TweetUpdateOneRequiredWithoutBookmarksNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutBookmarksInput, Prisma.TweetUncheckedCreateWithoutBookmarksInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutBookmarksInput
  upsert?: Prisma.TweetUpsertWithoutBookmarksInput
  connect?: Prisma.TweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TweetUpdateToOneWithWhereWithoutBookmarksInput, Prisma.TweetUpdateWithoutBookmarksInput>, Prisma.TweetUncheckedUpdateWithoutBookmarksInput>
}

export type TweetCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutNotificationsInput, Prisma.TweetUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutNotificationsInput
  connect?: Prisma.TweetWhereUniqueInput
}

export type TweetUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutNotificationsInput, Prisma.TweetUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutNotificationsInput
  upsert?: Prisma.TweetUpsertWithoutNotificationsInput
  disconnect?: Prisma.TweetWhereInput | boolean
  delete?: Prisma.TweetWhereInput | boolean
  connect?: Prisma.TweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TweetUpdateToOneWithWhereWithoutNotificationsInput, Prisma.TweetUpdateWithoutNotificationsInput>, Prisma.TweetUncheckedUpdateWithoutNotificationsInput>
}

export type TweetCreateNestedOneWithoutHashtagsInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutHashtagsInput, Prisma.TweetUncheckedCreateWithoutHashtagsInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutHashtagsInput
  connect?: Prisma.TweetWhereUniqueInput
}

export type TweetUpdateOneRequiredWithoutHashtagsNestedInput = {
  create?: Prisma.XOR<Prisma.TweetCreateWithoutHashtagsInput, Prisma.TweetUncheckedCreateWithoutHashtagsInput>
  connectOrCreate?: Prisma.TweetCreateOrConnectWithoutHashtagsInput
  upsert?: Prisma.TweetUpsertWithoutHashtagsInput
  connect?: Prisma.TweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TweetUpdateToOneWithWhereWithoutHashtagsInput, Prisma.TweetUpdateWithoutHashtagsInput>, Prisma.TweetUncheckedUpdateWithoutHashtagsInput>
}

export type TweetCreateWithoutAuthorInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutAuthorInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutAuthorInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput>
}

export type TweetCreateManyAuthorInputEnvelope = {
  data: Prisma.TweetCreateManyAuthorInput | Prisma.TweetCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type TweetUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.TweetWhereUniqueInput
  update: Prisma.XOR<Prisma.TweetUpdateWithoutAuthorInput, Prisma.TweetUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutAuthorInput, Prisma.TweetUncheckedCreateWithoutAuthorInput>
}

export type TweetUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.TweetWhereUniqueInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutAuthorInput, Prisma.TweetUncheckedUpdateWithoutAuthorInput>
}

export type TweetUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.TweetScalarWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateManyMutationInput, Prisma.TweetUncheckedUpdateManyWithoutAuthorInput>
}

export type TweetScalarWhereInput = {
  AND?: Prisma.TweetScalarWhereInput | Prisma.TweetScalarWhereInput[]
  OR?: Prisma.TweetScalarWhereInput[]
  NOT?: Prisma.TweetScalarWhereInput | Prisma.TweetScalarWhereInput[]
  id?: Prisma.IntFilter<"Tweet"> | number
  content?: Prisma.StringFilter<"Tweet"> | string
  userId?: Prisma.IntFilter<"Tweet"> | number
  createdAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tweet"> | Date | string
}

export type TweetCreateWithoutLikesInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutLikesInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutLikesInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutLikesInput, Prisma.TweetUncheckedCreateWithoutLikesInput>
}

export type TweetUpsertWithoutLikesInput = {
  update: Prisma.XOR<Prisma.TweetUpdateWithoutLikesInput, Prisma.TweetUncheckedUpdateWithoutLikesInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutLikesInput, Prisma.TweetUncheckedCreateWithoutLikesInput>
  where?: Prisma.TweetWhereInput
}

export type TweetUpdateToOneWithWhereWithoutLikesInput = {
  where?: Prisma.TweetWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutLikesInput, Prisma.TweetUncheckedUpdateWithoutLikesInput>
}

export type TweetUpdateWithoutLikesInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutLikesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateWithoutRepliesInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutRepliesInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutRepliesInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutRepliesInput, Prisma.TweetUncheckedCreateWithoutRepliesInput>
}

export type TweetUpsertWithoutRepliesInput = {
  update: Prisma.XOR<Prisma.TweetUpdateWithoutRepliesInput, Prisma.TweetUncheckedUpdateWithoutRepliesInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutRepliesInput, Prisma.TweetUncheckedCreateWithoutRepliesInput>
  where?: Prisma.TweetWhereInput
}

export type TweetUpdateToOneWithWhereWithoutRepliesInput = {
  where?: Prisma.TweetWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutRepliesInput, Prisma.TweetUncheckedUpdateWithoutRepliesInput>
}

export type TweetUpdateWithoutRepliesInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutRepliesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateWithoutBookmarksInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutBookmarksInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutBookmarksInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutBookmarksInput, Prisma.TweetUncheckedCreateWithoutBookmarksInput>
}

export type TweetUpsertWithoutBookmarksInput = {
  update: Prisma.XOR<Prisma.TweetUpdateWithoutBookmarksInput, Prisma.TweetUncheckedUpdateWithoutBookmarksInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutBookmarksInput, Prisma.TweetUncheckedCreateWithoutBookmarksInput>
  where?: Prisma.TweetWhereInput
}

export type TweetUpdateToOneWithWhereWithoutBookmarksInput = {
  where?: Prisma.TweetWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutBookmarksInput, Prisma.TweetUncheckedUpdateWithoutBookmarksInput>
}

export type TweetUpdateWithoutBookmarksInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutBookmarksInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateWithoutNotificationsInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutNotificationsInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  hashtags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutNotificationsInput, Prisma.TweetUncheckedCreateWithoutNotificationsInput>
}

export type TweetUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<Prisma.TweetUpdateWithoutNotificationsInput, Prisma.TweetUncheckedUpdateWithoutNotificationsInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutNotificationsInput, Prisma.TweetUncheckedCreateWithoutNotificationsInput>
  where?: Prisma.TweetWhereInput
}

export type TweetUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.TweetWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutNotificationsInput, Prisma.TweetUncheckedUpdateWithoutNotificationsInput>
}

export type TweetUpdateWithoutNotificationsInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateWithoutHashtagsInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutTweetsInput
  likes?: Prisma.LikeCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutTweetInput
}

export type TweetUncheckedCreateWithoutHashtagsInput = {
  id?: number
  content: string
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutTweetInput
  replies?: Prisma.ReplyUncheckedCreateNestedManyWithoutTweetInput
  bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutTweetInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutTweetInput
}

export type TweetCreateOrConnectWithoutHashtagsInput = {
  where: Prisma.TweetWhereUniqueInput
  create: Prisma.XOR<Prisma.TweetCreateWithoutHashtagsInput, Prisma.TweetUncheckedCreateWithoutHashtagsInput>
}

export type TweetUpsertWithoutHashtagsInput = {
  update: Prisma.XOR<Prisma.TweetUpdateWithoutHashtagsInput, Prisma.TweetUncheckedUpdateWithoutHashtagsInput>
  create: Prisma.XOR<Prisma.TweetCreateWithoutHashtagsInput, Prisma.TweetUncheckedCreateWithoutHashtagsInput>
  where?: Prisma.TweetWhereInput
}

export type TweetUpdateToOneWithWhereWithoutHashtagsInput = {
  where?: Prisma.TweetWhereInput
  data: Prisma.XOR<Prisma.TweetUpdateWithoutHashtagsInput, Prisma.TweetUncheckedUpdateWithoutHashtagsInput>
}

export type TweetUpdateWithoutHashtagsInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutTweetsNestedInput
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutHashtagsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetCreateManyAuthorInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TweetUpdateWithoutAuthorInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likes?: Prisma.LikeUncheckedUpdateManyWithoutTweetNestedInput
  replies?: Prisma.ReplyUncheckedUpdateManyWithoutTweetNestedInput
  hashtags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutTweetNestedInput
  bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutTweetNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutTweetNestedInput
}

export type TweetUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TweetCountOutputType
 */

export type TweetCountOutputType = {
  likes: number
  replies: number
  hashtags: number
  bookmarks: number
  notifications: number
}

export type TweetCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  likes?: boolean | TweetCountOutputTypeCountLikesArgs
  replies?: boolean | TweetCountOutputTypeCountRepliesArgs
  hashtags?: boolean | TweetCountOutputTypeCountHashtagsArgs
  bookmarks?: boolean | TweetCountOutputTypeCountBookmarksArgs
  notifications?: boolean | TweetCountOutputTypeCountNotificationsArgs
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetCountOutputType
   */
  select?: Prisma.TweetCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeCountLikesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LikeWhereInput
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeCountRepliesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReplyWhereInput
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeCountHashtagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TweetHashtagWhereInput
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeCountBookmarksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookmarkWhereInput
}

/**
 * TweetCountOutputType without action
 */
export type TweetCountOutputTypeCountNotificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationWhereInput
}


export type TweetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  likes?: boolean | Prisma.Tweet$likesArgs<ExtArgs>
  replies?: boolean | Prisma.Tweet$repliesArgs<ExtArgs>
  hashtags?: boolean | Prisma.Tweet$hashtagsArgs<ExtArgs>
  bookmarks?: boolean | Prisma.Tweet$bookmarksArgs<ExtArgs>
  notifications?: boolean | Prisma.Tweet$notificationsArgs<ExtArgs>
  _count?: boolean | Prisma.TweetCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweet"]>

export type TweetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweet"]>

export type TweetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tweet"]>

export type TweetSelectScalar = {
  id?: boolean
  content?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TweetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["tweet"]>
export type TweetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  likes?: boolean | Prisma.Tweet$likesArgs<ExtArgs>
  replies?: boolean | Prisma.Tweet$repliesArgs<ExtArgs>
  hashtags?: boolean | Prisma.Tweet$hashtagsArgs<ExtArgs>
  bookmarks?: boolean | Prisma.Tweet$bookmarksArgs<ExtArgs>
  notifications?: boolean | Prisma.Tweet$notificationsArgs<ExtArgs>
  _count?: boolean | Prisma.TweetCountOutputTypeDefaultArgs<ExtArgs>
}
export type TweetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TweetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TweetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tweet"
  objects: {
    author: Prisma.$UserPayload<ExtArgs>
    likes: Prisma.$LikePayload<ExtArgs>[]
    replies: Prisma.$ReplyPayload<ExtArgs>[]
    hashtags: Prisma.$TweetHashtagPayload<ExtArgs>[]
    bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
    notifications: Prisma.$NotificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    content: string
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["tweet"]>
  composites: {}
}

export type TweetGetPayload<S extends boolean | null | undefined | TweetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TweetPayload, S>

export type TweetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TweetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TweetCountAggregateInputType | true
  }

export interface TweetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tweet'], meta: { name: 'Tweet' } }
  /**
   * Find zero or one Tweet that matches the filter.
   * @param {TweetFindUniqueArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TweetFindUniqueArgs>(args: Prisma.SelectSubset<T, TweetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tweet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TweetFindUniqueOrThrowArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TweetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TweetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tweet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetFindFirstArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TweetFindFirstArgs>(args?: Prisma.SelectSubset<T, TweetFindFirstArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tweet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetFindFirstOrThrowArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TweetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TweetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tweets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tweets
   * const tweets = await prisma.tweet.findMany()
   * 
   * // Get first 10 Tweets
   * const tweets = await prisma.tweet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tweetWithIdOnly = await prisma.tweet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TweetFindManyArgs>(args?: Prisma.SelectSubset<T, TweetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tweet.
   * @param {TweetCreateArgs} args - Arguments to create a Tweet.
   * @example
   * // Create one Tweet
   * const Tweet = await prisma.tweet.create({
   *   data: {
   *     // ... data to create a Tweet
   *   }
   * })
   * 
   */
  create<T extends TweetCreateArgs>(args: Prisma.SelectSubset<T, TweetCreateArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tweets.
   * @param {TweetCreateManyArgs} args - Arguments to create many Tweets.
   * @example
   * // Create many Tweets
   * const tweet = await prisma.tweet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TweetCreateManyArgs>(args?: Prisma.SelectSubset<T, TweetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tweets and returns the data saved in the database.
   * @param {TweetCreateManyAndReturnArgs} args - Arguments to create many Tweets.
   * @example
   * // Create many Tweets
   * const tweet = await prisma.tweet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tweets and only return the `id`
   * const tweetWithIdOnly = await prisma.tweet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TweetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TweetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tweet.
   * @param {TweetDeleteArgs} args - Arguments to delete one Tweet.
   * @example
   * // Delete one Tweet
   * const Tweet = await prisma.tweet.delete({
   *   where: {
   *     // ... filter to delete one Tweet
   *   }
   * })
   * 
   */
  delete<T extends TweetDeleteArgs>(args: Prisma.SelectSubset<T, TweetDeleteArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tweet.
   * @param {TweetUpdateArgs} args - Arguments to update one Tweet.
   * @example
   * // Update one Tweet
   * const tweet = await prisma.tweet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TweetUpdateArgs>(args: Prisma.SelectSubset<T, TweetUpdateArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tweets.
   * @param {TweetDeleteManyArgs} args - Arguments to filter Tweets to delete.
   * @example
   * // Delete a few Tweets
   * const { count } = await prisma.tweet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TweetDeleteManyArgs>(args?: Prisma.SelectSubset<T, TweetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tweets
   * const tweet = await prisma.tweet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TweetUpdateManyArgs>(args: Prisma.SelectSubset<T, TweetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tweets and returns the data updated in the database.
   * @param {TweetUpdateManyAndReturnArgs} args - Arguments to update many Tweets.
   * @example
   * // Update many Tweets
   * const tweet = await prisma.tweet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tweets and only return the `id`
   * const tweetWithIdOnly = await prisma.tweet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TweetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TweetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tweet.
   * @param {TweetUpsertArgs} args - Arguments to update or create a Tweet.
   * @example
   * // Update or create a Tweet
   * const tweet = await prisma.tweet.upsert({
   *   create: {
   *     // ... data to create a Tweet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tweet we want to update
   *   }
   * })
   */
  upsert<T extends TweetUpsertArgs>(args: Prisma.SelectSubset<T, TweetUpsertArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetCountArgs} args - Arguments to filter Tweets to count.
   * @example
   * // Count the number of Tweets
   * const count = await prisma.tweet.count({
   *   where: {
   *     // ... the filter for the Tweets we want to count
   *   }
   * })
  **/
  count<T extends TweetCountArgs>(
    args?: Prisma.Subset<T, TweetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TweetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TweetAggregateArgs>(args: Prisma.Subset<T, TweetAggregateArgs>): Prisma.PrismaPromise<GetTweetAggregateType<T>>

  /**
   * Group by Tweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TweetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TweetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TweetGroupByArgs['orderBy'] }
      : { orderBy?: TweetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tweet model
 */
readonly fields: TweetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tweet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TweetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  author<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  likes<T extends Prisma.Tweet$likesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tweet$likesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  replies<T extends Prisma.Tweet$repliesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tweet$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  hashtags<T extends Prisma.Tweet$hashtagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tweet$hashtagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  bookmarks<T extends Prisma.Tweet$bookmarksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tweet$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notifications<T extends Prisma.Tweet$notificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tweet$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tweet model
 */
export interface TweetFieldRefs {
  readonly id: Prisma.FieldRef<"Tweet", 'Int'>
  readonly content: Prisma.FieldRef<"Tweet", 'String'>
  readonly userId: Prisma.FieldRef<"Tweet", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Tweet", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Tweet", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Tweet findUnique
 */
export type TweetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter, which Tweet to fetch.
   */
  where: Prisma.TweetWhereUniqueInput
}

/**
 * Tweet findUniqueOrThrow
 */
export type TweetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter, which Tweet to fetch.
   */
  where: Prisma.TweetWhereUniqueInput
}

/**
 * Tweet findFirst
 */
export type TweetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter, which Tweet to fetch.
   */
  where?: Prisma.TweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tweets to fetch.
   */
  orderBy?: Prisma.TweetOrderByWithRelationInput | Prisma.TweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tweets.
   */
  cursor?: Prisma.TweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tweets.
   */
  distinct?: Prisma.TweetScalarFieldEnum | Prisma.TweetScalarFieldEnum[]
}

/**
 * Tweet findFirstOrThrow
 */
export type TweetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter, which Tweet to fetch.
   */
  where?: Prisma.TweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tweets to fetch.
   */
  orderBy?: Prisma.TweetOrderByWithRelationInput | Prisma.TweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tweets.
   */
  cursor?: Prisma.TweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tweets.
   */
  distinct?: Prisma.TweetScalarFieldEnum | Prisma.TweetScalarFieldEnum[]
}

/**
 * Tweet findMany
 */
export type TweetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter, which Tweets to fetch.
   */
  where?: Prisma.TweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tweets to fetch.
   */
  orderBy?: Prisma.TweetOrderByWithRelationInput | Prisma.TweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tweets.
   */
  cursor?: Prisma.TweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tweets.
   */
  skip?: number
  distinct?: Prisma.TweetScalarFieldEnum | Prisma.TweetScalarFieldEnum[]
}

/**
 * Tweet create
 */
export type TweetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * The data needed to create a Tweet.
   */
  data: Prisma.XOR<Prisma.TweetCreateInput, Prisma.TweetUncheckedCreateInput>
}

/**
 * Tweet createMany
 */
export type TweetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tweets.
   */
  data: Prisma.TweetCreateManyInput | Prisma.TweetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tweet createManyAndReturn
 */
export type TweetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * The data used to create many Tweets.
   */
  data: Prisma.TweetCreateManyInput | Prisma.TweetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Tweet update
 */
export type TweetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * The data needed to update a Tweet.
   */
  data: Prisma.XOR<Prisma.TweetUpdateInput, Prisma.TweetUncheckedUpdateInput>
  /**
   * Choose, which Tweet to update.
   */
  where: Prisma.TweetWhereUniqueInput
}

/**
 * Tweet updateMany
 */
export type TweetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tweets.
   */
  data: Prisma.XOR<Prisma.TweetUpdateManyMutationInput, Prisma.TweetUncheckedUpdateManyInput>
  /**
   * Filter which Tweets to update
   */
  where?: Prisma.TweetWhereInput
  /**
   * Limit how many Tweets to update.
   */
  limit?: number
}

/**
 * Tweet updateManyAndReturn
 */
export type TweetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * The data used to update Tweets.
   */
  data: Prisma.XOR<Prisma.TweetUpdateManyMutationInput, Prisma.TweetUncheckedUpdateManyInput>
  /**
   * Filter which Tweets to update
   */
  where?: Prisma.TweetWhereInput
  /**
   * Limit how many Tweets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Tweet upsert
 */
export type TweetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * The filter to search for the Tweet to update in case it exists.
   */
  where: Prisma.TweetWhereUniqueInput
  /**
   * In case the Tweet found by the `where` argument doesn't exist, create a new Tweet with this data.
   */
  create: Prisma.XOR<Prisma.TweetCreateInput, Prisma.TweetUncheckedCreateInput>
  /**
   * In case the Tweet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TweetUpdateInput, Prisma.TweetUncheckedUpdateInput>
}

/**
 * Tweet delete
 */
export type TweetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
  /**
   * Filter which Tweet to delete.
   */
  where: Prisma.TweetWhereUniqueInput
}

/**
 * Tweet deleteMany
 */
export type TweetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tweets to delete
   */
  where?: Prisma.TweetWhereInput
  /**
   * Limit how many Tweets to delete.
   */
  limit?: number
}

/**
 * Tweet.likes
 */
export type Tweet$likesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Like
   */
  select?: Prisma.LikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Like
   */
  omit?: Prisma.LikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LikeInclude<ExtArgs> | null
  where?: Prisma.LikeWhereInput
  orderBy?: Prisma.LikeOrderByWithRelationInput | Prisma.LikeOrderByWithRelationInput[]
  cursor?: Prisma.LikeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LikeScalarFieldEnum | Prisma.LikeScalarFieldEnum[]
}

/**
 * Tweet.replies
 */
export type Tweet$repliesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reply
   */
  select?: Prisma.ReplySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reply
   */
  omit?: Prisma.ReplyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReplyInclude<ExtArgs> | null
  where?: Prisma.ReplyWhereInput
  orderBy?: Prisma.ReplyOrderByWithRelationInput | Prisma.ReplyOrderByWithRelationInput[]
  cursor?: Prisma.ReplyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReplyScalarFieldEnum | Prisma.ReplyScalarFieldEnum[]
}

/**
 * Tweet.hashtags
 */
export type Tweet$hashtagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  where?: Prisma.TweetHashtagWhereInput
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TweetHashtagScalarFieldEnum | Prisma.TweetHashtagScalarFieldEnum[]
}

/**
 * Tweet.bookmarks
 */
export type Tweet$bookmarksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookmark
   */
  select?: Prisma.BookmarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookmark
   */
  omit?: Prisma.BookmarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookmarkInclude<ExtArgs> | null
  where?: Prisma.BookmarkWhereInput
  orderBy?: Prisma.BookmarkOrderByWithRelationInput | Prisma.BookmarkOrderByWithRelationInput[]
  cursor?: Prisma.BookmarkWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookmarkScalarFieldEnum | Prisma.BookmarkScalarFieldEnum[]
}

/**
 * Tweet.notifications
 */
export type Tweet$notificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null
  where?: Prisma.NotificationWhereInput
  orderBy?: Prisma.NotificationOrderByWithRelationInput | Prisma.NotificationOrderByWithRelationInput[]
  cursor?: Prisma.NotificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationScalarFieldEnum | Prisma.NotificationScalarFieldEnum[]
}

/**
 * Tweet without action
 */
export type TweetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tweet
   */
  select?: Prisma.TweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tweet
   */
  omit?: Prisma.TweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetInclude<ExtArgs> | null
}
