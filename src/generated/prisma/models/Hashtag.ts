
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Hashtag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Hashtag
 * 
 */
export type HashtagModel = runtime.Types.Result.DefaultSelection<Prisma.$HashtagPayload>

export type AggregateHashtag = {
  _count: HashtagCountAggregateOutputType | null
  _avg: HashtagAvgAggregateOutputType | null
  _sum: HashtagSumAggregateOutputType | null
  _min: HashtagMinAggregateOutputType | null
  _max: HashtagMaxAggregateOutputType | null
}

export type HashtagAvgAggregateOutputType = {
  id: number | null
}

export type HashtagSumAggregateOutputType = {
  id: number | null
}

export type HashtagMinAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HashtagMaxAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HashtagCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type HashtagAvgAggregateInputType = {
  id?: true
}

export type HashtagSumAggregateInputType = {
  id?: true
}

export type HashtagMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type HashtagMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type HashtagCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type HashtagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Hashtag to aggregate.
   */
  where?: Prisma.HashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Hashtags to fetch.
   */
  orderBy?: Prisma.HashtagOrderByWithRelationInput | Prisma.HashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Hashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Hashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Hashtags
  **/
  _count?: true | HashtagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: HashtagAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: HashtagSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HashtagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HashtagMaxAggregateInputType
}

export type GetHashtagAggregateType<T extends HashtagAggregateArgs> = {
      [P in keyof T & keyof AggregateHashtag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHashtag[P]>
    : Prisma.GetScalarType<T[P], AggregateHashtag[P]>
}




export type HashtagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HashtagWhereInput
  orderBy?: Prisma.HashtagOrderByWithAggregationInput | Prisma.HashtagOrderByWithAggregationInput[]
  by: Prisma.HashtagScalarFieldEnum[] | Prisma.HashtagScalarFieldEnum
  having?: Prisma.HashtagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HashtagCountAggregateInputType | true
  _avg?: HashtagAvgAggregateInputType
  _sum?: HashtagSumAggregateInputType
  _min?: HashtagMinAggregateInputType
  _max?: HashtagMaxAggregateInputType
}

export type HashtagGroupByOutputType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
  _count: HashtagCountAggregateOutputType | null
  _avg: HashtagAvgAggregateOutputType | null
  _sum: HashtagSumAggregateOutputType | null
  _min: HashtagMinAggregateOutputType | null
  _max: HashtagMaxAggregateOutputType | null
}

type GetHashtagGroupByPayload<T extends HashtagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HashtagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HashtagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HashtagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HashtagGroupByOutputType[P]>
      }
    >
  > 



export type HashtagWhereInput = {
  AND?: Prisma.HashtagWhereInput | Prisma.HashtagWhereInput[]
  OR?: Prisma.HashtagWhereInput[]
  NOT?: Prisma.HashtagWhereInput | Prisma.HashtagWhereInput[]
  id?: Prisma.IntFilter<"Hashtag"> | number
  name?: Prisma.StringFilter<"Hashtag"> | string
  createdAt?: Prisma.DateTimeFilter<"Hashtag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Hashtag"> | Date | string
  tweetTags?: Prisma.TweetHashtagListRelationFilter
}

export type HashtagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tweetTags?: Prisma.TweetHashtagOrderByRelationAggregateInput
}

export type HashtagWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.HashtagWhereInput | Prisma.HashtagWhereInput[]
  OR?: Prisma.HashtagWhereInput[]
  NOT?: Prisma.HashtagWhereInput | Prisma.HashtagWhereInput[]
  name?: Prisma.StringFilter<"Hashtag"> | string
  createdAt?: Prisma.DateTimeFilter<"Hashtag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Hashtag"> | Date | string
  tweetTags?: Prisma.TweetHashtagListRelationFilter
}, "id">

export type HashtagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.HashtagCountOrderByAggregateInput
  _avg?: Prisma.HashtagAvgOrderByAggregateInput
  _max?: Prisma.HashtagMaxOrderByAggregateInput
  _min?: Prisma.HashtagMinOrderByAggregateInput
  _sum?: Prisma.HashtagSumOrderByAggregateInput
}

export type HashtagScalarWhereWithAggregatesInput = {
  AND?: Prisma.HashtagScalarWhereWithAggregatesInput | Prisma.HashtagScalarWhereWithAggregatesInput[]
  OR?: Prisma.HashtagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HashtagScalarWhereWithAggregatesInput | Prisma.HashtagScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Hashtag"> | number
  name?: Prisma.StringWithAggregatesFilter<"Hashtag"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Hashtag"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Hashtag"> | Date | string
}

export type HashtagCreateInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  tweetTags?: Prisma.TweetHashtagCreateNestedManyWithoutHashtagInput
}

export type HashtagUncheckedCreateInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  tweetTags?: Prisma.TweetHashtagUncheckedCreateNestedManyWithoutHashtagInput
}

export type HashtagUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweetTags?: Prisma.TweetHashtagUpdateManyWithoutHashtagNestedInput
}

export type HashtagUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweetTags?: Prisma.TweetHashtagUncheckedUpdateManyWithoutHashtagNestedInput
}

export type HashtagCreateManyInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HashtagUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HashtagUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HashtagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HashtagAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type HashtagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HashtagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HashtagSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type HashtagScalarRelationFilter = {
  is?: Prisma.HashtagWhereInput
  isNot?: Prisma.HashtagWhereInput
}

export type HashtagCreateNestedOneWithoutTweetTagsInput = {
  create?: Prisma.XOR<Prisma.HashtagCreateWithoutTweetTagsInput, Prisma.HashtagUncheckedCreateWithoutTweetTagsInput>
  connectOrCreate?: Prisma.HashtagCreateOrConnectWithoutTweetTagsInput
  connect?: Prisma.HashtagWhereUniqueInput
}

export type HashtagUpdateOneRequiredWithoutTweetTagsNestedInput = {
  create?: Prisma.XOR<Prisma.HashtagCreateWithoutTweetTagsInput, Prisma.HashtagUncheckedCreateWithoutTweetTagsInput>
  connectOrCreate?: Prisma.HashtagCreateOrConnectWithoutTweetTagsInput
  upsert?: Prisma.HashtagUpsertWithoutTweetTagsInput
  connect?: Prisma.HashtagWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.HashtagUpdateToOneWithWhereWithoutTweetTagsInput, Prisma.HashtagUpdateWithoutTweetTagsInput>, Prisma.HashtagUncheckedUpdateWithoutTweetTagsInput>
}

export type HashtagCreateWithoutTweetTagsInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HashtagUncheckedCreateWithoutTweetTagsInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HashtagCreateOrConnectWithoutTweetTagsInput = {
  where: Prisma.HashtagWhereUniqueInput
  create: Prisma.XOR<Prisma.HashtagCreateWithoutTweetTagsInput, Prisma.HashtagUncheckedCreateWithoutTweetTagsInput>
}

export type HashtagUpsertWithoutTweetTagsInput = {
  update: Prisma.XOR<Prisma.HashtagUpdateWithoutTweetTagsInput, Prisma.HashtagUncheckedUpdateWithoutTweetTagsInput>
  create: Prisma.XOR<Prisma.HashtagCreateWithoutTweetTagsInput, Prisma.HashtagUncheckedCreateWithoutTweetTagsInput>
  where?: Prisma.HashtagWhereInput
}

export type HashtagUpdateToOneWithWhereWithoutTweetTagsInput = {
  where?: Prisma.HashtagWhereInput
  data: Prisma.XOR<Prisma.HashtagUpdateWithoutTweetTagsInput, Prisma.HashtagUncheckedUpdateWithoutTweetTagsInput>
}

export type HashtagUpdateWithoutTweetTagsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HashtagUncheckedUpdateWithoutTweetTagsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type HashtagCountOutputType
 */

export type HashtagCountOutputType = {
  tweetTags: number
}

export type HashtagCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tweetTags?: boolean | HashtagCountOutputTypeCountTweetTagsArgs
}

/**
 * HashtagCountOutputType without action
 */
export type HashtagCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HashtagCountOutputType
   */
  select?: Prisma.HashtagCountOutputTypeSelect<ExtArgs> | null
}

/**
 * HashtagCountOutputType without action
 */
export type HashtagCountOutputTypeCountTweetTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TweetHashtagWhereInput
}


export type HashtagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tweetTags?: boolean | Prisma.Hashtag$tweetTagsArgs<ExtArgs>
  _count?: boolean | Prisma.HashtagCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hashtag"]>

export type HashtagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["hashtag"]>

export type HashtagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["hashtag"]>

export type HashtagSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type HashtagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["hashtag"]>
export type HashtagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tweetTags?: boolean | Prisma.Hashtag$tweetTagsArgs<ExtArgs>
  _count?: boolean | Prisma.HashtagCountOutputTypeDefaultArgs<ExtArgs>
}
export type HashtagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type HashtagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $HashtagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Hashtag"
  objects: {
    tweetTags: Prisma.$TweetHashtagPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["hashtag"]>
  composites: {}
}

export type HashtagGetPayload<S extends boolean | null | undefined | HashtagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HashtagPayload, S>

export type HashtagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HashtagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HashtagCountAggregateInputType | true
  }

export interface HashtagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hashtag'], meta: { name: 'Hashtag' } }
  /**
   * Find zero or one Hashtag that matches the filter.
   * @param {HashtagFindUniqueArgs} args - Arguments to find a Hashtag
   * @example
   * // Get one Hashtag
   * const hashtag = await prisma.hashtag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HashtagFindUniqueArgs>(args: Prisma.SelectSubset<T, HashtagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Hashtag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HashtagFindUniqueOrThrowArgs} args - Arguments to find a Hashtag
   * @example
   * // Get one Hashtag
   * const hashtag = await prisma.hashtag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HashtagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HashtagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hashtag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagFindFirstArgs} args - Arguments to find a Hashtag
   * @example
   * // Get one Hashtag
   * const hashtag = await prisma.hashtag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HashtagFindFirstArgs>(args?: Prisma.SelectSubset<T, HashtagFindFirstArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hashtag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagFindFirstOrThrowArgs} args - Arguments to find a Hashtag
   * @example
   * // Get one Hashtag
   * const hashtag = await prisma.hashtag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HashtagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HashtagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Hashtags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Hashtags
   * const hashtags = await prisma.hashtag.findMany()
   * 
   * // Get first 10 Hashtags
   * const hashtags = await prisma.hashtag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const hashtagWithIdOnly = await prisma.hashtag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HashtagFindManyArgs>(args?: Prisma.SelectSubset<T, HashtagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Hashtag.
   * @param {HashtagCreateArgs} args - Arguments to create a Hashtag.
   * @example
   * // Create one Hashtag
   * const Hashtag = await prisma.hashtag.create({
   *   data: {
   *     // ... data to create a Hashtag
   *   }
   * })
   * 
   */
  create<T extends HashtagCreateArgs>(args: Prisma.SelectSubset<T, HashtagCreateArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Hashtags.
   * @param {HashtagCreateManyArgs} args - Arguments to create many Hashtags.
   * @example
   * // Create many Hashtags
   * const hashtag = await prisma.hashtag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HashtagCreateManyArgs>(args?: Prisma.SelectSubset<T, HashtagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Hashtags and returns the data saved in the database.
   * @param {HashtagCreateManyAndReturnArgs} args - Arguments to create many Hashtags.
   * @example
   * // Create many Hashtags
   * const hashtag = await prisma.hashtag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Hashtags and only return the `id`
   * const hashtagWithIdOnly = await prisma.hashtag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HashtagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HashtagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Hashtag.
   * @param {HashtagDeleteArgs} args - Arguments to delete one Hashtag.
   * @example
   * // Delete one Hashtag
   * const Hashtag = await prisma.hashtag.delete({
   *   where: {
   *     // ... filter to delete one Hashtag
   *   }
   * })
   * 
   */
  delete<T extends HashtagDeleteArgs>(args: Prisma.SelectSubset<T, HashtagDeleteArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Hashtag.
   * @param {HashtagUpdateArgs} args - Arguments to update one Hashtag.
   * @example
   * // Update one Hashtag
   * const hashtag = await prisma.hashtag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HashtagUpdateArgs>(args: Prisma.SelectSubset<T, HashtagUpdateArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Hashtags.
   * @param {HashtagDeleteManyArgs} args - Arguments to filter Hashtags to delete.
   * @example
   * // Delete a few Hashtags
   * const { count } = await prisma.hashtag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HashtagDeleteManyArgs>(args?: Prisma.SelectSubset<T, HashtagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Hashtags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Hashtags
   * const hashtag = await prisma.hashtag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HashtagUpdateManyArgs>(args: Prisma.SelectSubset<T, HashtagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Hashtags and returns the data updated in the database.
   * @param {HashtagUpdateManyAndReturnArgs} args - Arguments to update many Hashtags.
   * @example
   * // Update many Hashtags
   * const hashtag = await prisma.hashtag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Hashtags and only return the `id`
   * const hashtagWithIdOnly = await prisma.hashtag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HashtagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HashtagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Hashtag.
   * @param {HashtagUpsertArgs} args - Arguments to update or create a Hashtag.
   * @example
   * // Update or create a Hashtag
   * const hashtag = await prisma.hashtag.upsert({
   *   create: {
   *     // ... data to create a Hashtag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Hashtag we want to update
   *   }
   * })
   */
  upsert<T extends HashtagUpsertArgs>(args: Prisma.SelectSubset<T, HashtagUpsertArgs<ExtArgs>>): Prisma.Prisma__HashtagClient<runtime.Types.Result.GetResult<Prisma.$HashtagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Hashtags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagCountArgs} args - Arguments to filter Hashtags to count.
   * @example
   * // Count the number of Hashtags
   * const count = await prisma.hashtag.count({
   *   where: {
   *     // ... the filter for the Hashtags we want to count
   *   }
   * })
  **/
  count<T extends HashtagCountArgs>(
    args?: Prisma.Subset<T, HashtagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HashtagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Hashtag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HashtagAggregateArgs>(args: Prisma.Subset<T, HashtagAggregateArgs>): Prisma.PrismaPromise<GetHashtagAggregateType<T>>

  /**
   * Group by Hashtag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashtagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HashtagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HashtagGroupByArgs['orderBy'] }
      : { orderBy?: HashtagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Hashtag model
 */
readonly fields: HashtagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Hashtag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HashtagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tweetTags<T extends Prisma.Hashtag$tweetTagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Hashtag$tweetTagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TweetHashtagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Hashtag model
 */
export interface HashtagFieldRefs {
  readonly id: Prisma.FieldRef<"Hashtag", 'Int'>
  readonly name: Prisma.FieldRef<"Hashtag", 'String'>
  readonly createdAt: Prisma.FieldRef<"Hashtag", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Hashtag", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Hashtag findUnique
 */
export type HashtagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter, which Hashtag to fetch.
   */
  where: Prisma.HashtagWhereUniqueInput
}

/**
 * Hashtag findUniqueOrThrow
 */
export type HashtagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter, which Hashtag to fetch.
   */
  where: Prisma.HashtagWhereUniqueInput
}

/**
 * Hashtag findFirst
 */
export type HashtagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter, which Hashtag to fetch.
   */
  where?: Prisma.HashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Hashtags to fetch.
   */
  orderBy?: Prisma.HashtagOrderByWithRelationInput | Prisma.HashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Hashtags.
   */
  cursor?: Prisma.HashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Hashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Hashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Hashtags.
   */
  distinct?: Prisma.HashtagScalarFieldEnum | Prisma.HashtagScalarFieldEnum[]
}

/**
 * Hashtag findFirstOrThrow
 */
export type HashtagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter, which Hashtag to fetch.
   */
  where?: Prisma.HashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Hashtags to fetch.
   */
  orderBy?: Prisma.HashtagOrderByWithRelationInput | Prisma.HashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Hashtags.
   */
  cursor?: Prisma.HashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Hashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Hashtags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Hashtags.
   */
  distinct?: Prisma.HashtagScalarFieldEnum | Prisma.HashtagScalarFieldEnum[]
}

/**
 * Hashtag findMany
 */
export type HashtagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter, which Hashtags to fetch.
   */
  where?: Prisma.HashtagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Hashtags to fetch.
   */
  orderBy?: Prisma.HashtagOrderByWithRelationInput | Prisma.HashtagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Hashtags.
   */
  cursor?: Prisma.HashtagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Hashtags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Hashtags.
   */
  skip?: number
  distinct?: Prisma.HashtagScalarFieldEnum | Prisma.HashtagScalarFieldEnum[]
}

/**
 * Hashtag create
 */
export type HashtagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * The data needed to create a Hashtag.
   */
  data: Prisma.XOR<Prisma.HashtagCreateInput, Prisma.HashtagUncheckedCreateInput>
}

/**
 * Hashtag createMany
 */
export type HashtagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Hashtags.
   */
  data: Prisma.HashtagCreateManyInput | Prisma.HashtagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Hashtag createManyAndReturn
 */
export type HashtagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * The data used to create many Hashtags.
   */
  data: Prisma.HashtagCreateManyInput | Prisma.HashtagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Hashtag update
 */
export type HashtagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * The data needed to update a Hashtag.
   */
  data: Prisma.XOR<Prisma.HashtagUpdateInput, Prisma.HashtagUncheckedUpdateInput>
  /**
   * Choose, which Hashtag to update.
   */
  where: Prisma.HashtagWhereUniqueInput
}

/**
 * Hashtag updateMany
 */
export type HashtagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Hashtags.
   */
  data: Prisma.XOR<Prisma.HashtagUpdateManyMutationInput, Prisma.HashtagUncheckedUpdateManyInput>
  /**
   * Filter which Hashtags to update
   */
  where?: Prisma.HashtagWhereInput
  /**
   * Limit how many Hashtags to update.
   */
  limit?: number
}

/**
 * Hashtag updateManyAndReturn
 */
export type HashtagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * The data used to update Hashtags.
   */
  data: Prisma.XOR<Prisma.HashtagUpdateManyMutationInput, Prisma.HashtagUncheckedUpdateManyInput>
  /**
   * Filter which Hashtags to update
   */
  where?: Prisma.HashtagWhereInput
  /**
   * Limit how many Hashtags to update.
   */
  limit?: number
}

/**
 * Hashtag upsert
 */
export type HashtagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * The filter to search for the Hashtag to update in case it exists.
   */
  where: Prisma.HashtagWhereUniqueInput
  /**
   * In case the Hashtag found by the `where` argument doesn't exist, create a new Hashtag with this data.
   */
  create: Prisma.XOR<Prisma.HashtagCreateInput, Prisma.HashtagUncheckedCreateInput>
  /**
   * In case the Hashtag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HashtagUpdateInput, Prisma.HashtagUncheckedUpdateInput>
}

/**
 * Hashtag delete
 */
export type HashtagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
  /**
   * Filter which Hashtag to delete.
   */
  where: Prisma.HashtagWhereUniqueInput
}

/**
 * Hashtag deleteMany
 */
export type HashtagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Hashtags to delete
   */
  where?: Prisma.HashtagWhereInput
  /**
   * Limit how many Hashtags to delete.
   */
  limit?: number
}

/**
 * Hashtag.tweetTags
 */
export type Hashtag$tweetTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TweetHashtag
   */
  select?: Prisma.TweetHashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TweetHashtag
   */
  omit?: Prisma.TweetHashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TweetHashtagInclude<ExtArgs> | null
  where?: Prisma.TweetHashtagWhereInput
  orderBy?: Prisma.TweetHashtagOrderByWithRelationInput | Prisma.TweetHashtagOrderByWithRelationInput[]
  cursor?: Prisma.TweetHashtagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TweetHashtagScalarFieldEnum | Prisma.TweetHashtagScalarFieldEnum[]
}

/**
 * Hashtag without action
 */
export type HashtagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hashtag
   */
  select?: Prisma.HashtagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hashtag
   */
  omit?: Prisma.HashtagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashtagInclude<ExtArgs> | null
}
